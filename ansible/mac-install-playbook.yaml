---
- name: Install MacOS packages
  hosts: localhost
  become: false
  vars:
    brew_cask_packages:
      - docker
      - multipass
    brew_packages:
      - helm@3
      - k3sup
      - kubectl
      - terraform
    install_homebrew_if_missing: false
    upgrade_homebrew_packages: false
    vm_names:
      - mario
      - luigi

  pre_tasks:
    - name: Ensuring Homebrew is installed
      stat:
        path: /usr/local/bin/brew
      register: homebrew_check

    - name: Fail if Homebrew isn't installed and install_homebrew_if_missing is false
      fail:
        msg: Homebrew is missing... Install from http://brew.sh/
      when:
        - not homebrew_check.stat.exists
        - not install_homebrew_if_missing

    - name: Installing Homebrew
      command: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      when:
        - not homebrew_check.stat.exists
        - install_homebrew_if_missing

  tasks:
    - name: Updating Homebrew
      homebrew:
        update_homebrew: true
      when: homebrew_check.stat.exists

    - name: Upgrading Homebrew packages
      homebrew:
        upgrade_all: "{{ upgrade_homebrew_packages }}"
      register: result
      until: result is successful
      when: homebrew_check.stat.exists

    - name: Installing Homebrew Cask packages
      homebrew_cask:
        name: "{{ brew_cask_packages }}"
        state: present
      register: result
      until: result is successful
      when: homebrew_check.stat.exists

    - name: Installing Homebrew packages
      homebrew:
        name: "{{ brew_packages }}"
        state: present
      register: result
      until: result is successful
      when: homebrew_check.stat.exists

    - name: Check if machines already exist
      command: multipass info mario | grep Running
      register: multipass_check
      ignore_errors: true
      changed_when: false

    - name: Creating virtual machines
      command: multipass launch ubuntu --name {{ item }} --cloud-init=../cloud-init.yaml
      with_items: "{{ vm_names }}"
      when: multipass_check.rc == 1

    - name: Get master IP
      shell: set -o pipefail && multipass info mario | grep IPv4 | awk '{print $2}'
      register: get_master_ip
      changed_when: false

    - name: Set master IP
      set_fact:
        master_ip: "{{ get_master_ip.stdout }}"

    - name: Install K3s on master
      command: k3sup install --ip {{ master_ip }} --user jitsejan --context k3s-context
      changed_when: false

    - name: Deploy something
      include_tasks: deploy-nodes.yaml
      loop: "{{ vm_names }}"
      vars:
        master: "{{ master_ip }}"

    - name: Check kubectl
      command: kubectl get nodes -o wide
      changed_when: false
