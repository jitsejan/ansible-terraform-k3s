---
apiVersion: v1
kind: Namespace
metadata:
  name: minio
---
# kind: PersistentVolume
# apiVersion: v1
# metadata:
#   name: minio-pv-volume
#   namespace: minio
#   labels:
#     type: local
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 15Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/Users/jitse-jan.vanwaterschoot"
# ---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pv-claim
  namespace: minio
  labels:
    app: minio-storage-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  namespace: minio
  name: minio-deployment
spec:
  selector:
    matchLabels:
      app: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        # Label is used as selector in the service.
        app: minio
    spec:
      # Refer to the PVC created earlier
      volumes:
        - name: data
          persistentVolumeClaim:
            # Name of the PVC created earlier
            claimName: minio-pv-claim
      containers:
        - name: minio
          # Pulls the default Minio image from Docker Hub
          image: minio/minio:latest
          args:
            - server
            - /data
          env:
            # Minio access key and secret key
            - name: MINIO_ACCESS_KEY
              value: "minio"
            - name: MINIO_SECRET_KEY
              value: "minio123"
          ports:
            - containerPort: 9000
              hostPort: 9000
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20
          # Liveness probe detects situations where MinIO server instance
          # is not working properly and needs restart. Kubernetes automatically
          # restarts the pods if liveness checks fail.
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20
          # Mount the volume into the pod
          volumeMounts:
            - name: data
              mountPath: "/home/jitsejan"
---
apiVersion: v1
kind: Service
metadata:
  namespace: minio
  name: minio-service
spec:
  ports:
    - name: http
      targetPort: 9000
      port: 9000
  selector:
    app: minio
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: minio
  name: minio-ingress
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - http:
        paths:
          - path: /minio
            pathType: Prefix
            backend:
              service:
                name: minio-service
                port:
                  name: http
