---
apiVersion: v1
kind: Namespace
metadata:
  name: minio
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: minio-pv-volume
  namespace: minio
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 15Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: {{ minio_path }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pv-claim
  namespace: minio
  labels:
    app: minio
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 15Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: minio
  name: minio-deployment
  labels:
    app: minio
spec:
  selector:
    matchLabels:
      app: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio-container
          image: minio/minio:{{ minio_version }}
          args:
            - server
            - /data
          env:
            # Minio access key and secret key
            - name: MINIO_ROOT_USER
              value: {{ minio_access_key }}
            - name: MINIO_ROOT_PASSWORD
              value: {{ minio_secret_key }}
          ports:
            - containerPort: 9000
              hostPort: 9000
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20
          # Liveness probe detects situations where MinIO server instance
          # is not working properly and needs restart. Kubernetes automatically
          # restarts the pods if liveness checks fail.
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20
          # Mount the volume into the pod
          volumeMounts:
            - name: nginx-pv-storage
              mountPath: "/data"
      volumes:
        - name: nginx-pv-storage
          persistentVolumeClaim:
            claimName: minio-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  namespace: minio
  name: minio-service
spec:
  ports:
    - name: http
      targetPort: 9000
      port: 9000
  selector:
    app: minio
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: minio
  name: minio-ingress
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: "{{ 'http://minio.localhost' if ansible_distribution == 'MacOSX' else 'minio.jitsejan.com' }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: minio-service
                port:
                  name: http
